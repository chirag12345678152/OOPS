#1.
def reverse_number(n):
    return int(str(n)[::-1])

# Test the function
num = int(input("Enter a number to find its reverse: "))
print(f"The reverse of {num} is: {reverse_number(num)}")


#2. 
def is_perfect_number(n):
    sum_of_divisors = sum(i for i in range(1, n) if n % i == 0)
    return sum_of_divisors == n

# Test the function
num = int(input("Enter a number to check if it's a Perfect number: "))
if is_perfect_number(num):
    print(f"{num} is a Perfect number.")
else:
    print(f"{num} is not a Perfect number.")


#3.
def is_palindrome(n):
    return str(n) == str(n)[::-1]

# Test the function
num = int(input("Enter a number to check if it's a Palindrome: "))
if is_palindrome(num):
    print(f"{num} is a Palindrome number.")
else:
    print(f"{num} is not a Palindrome number.")


#4.
1
1 2
1 2 3
1 2 3 4
1 2 3 4 5

def pattern1():
    for i in range(1, 6):
        print(" ".join(str(j) for j in range(1, i + 1)))

# Call the function to print the pattern
pattern1()



#5.
def pattern2():
    for i in range(1, 6):
        print(" ".join([str(i)] * i))

# Call the function to print the pattern
pattern2()


1
2 2
3 3 3
4 4 4 4
5 5 5 5 5


#6.
def pattern3():
    for i in range(1, 6):
        print(" ".join([chr(64 + i)] * i))

# Call the function to print the pattern
pattern3()


A
B B
C C C
D D D D
E E E E E


#7.
def pattern4():
    for i in range(5, 0, -1):
        print(" ".join(["*"] * i))

# Call the function to print the pattern
pattern4()


* * * * *
* * * *
* * *
* *
*

